import logging
import json
from agents.general_agent import GeneralAgent
from agents.health_agent import HealthAgent
from agents.task_agent import TaskAgent
from agents.cycle_agent import CycleAgent
from agents.relationship_agent import RelationshipAgent
from field_aliases import field_to_column, name_to_field, field_names, normalize_field

logger = logging.getLogger(__name__)


class AgentRouter:
    def __init__(self, db_pool, openai_client):
        self.db_pool = db_pool
        self.openai = openai_client

        self.general_agent = GeneralAgent(db_pool, openai_client)
        self.health_agent = HealthAgent(db_pool, openai_client)
        self.task_agent = TaskAgent(db_pool, openai_client)
        self.cycle_agent = CycleAgent(db_pool, openai_client)
        self.relationship_agent = RelationshipAgent(db_pool, openai_client)

    async def handle(self, user_id: int, text: str, image_path: str = None) -> str:
        try:
            # –ó–∞–ø—Ä–æ—Å –∫ GPT
            response = self.openai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "–¢—ã —É–º–Ω—ã–π –∞–≥–µ–Ω—Ç. –ü–æ–ª—É—á–∏–≤ —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–ø—Ä–µ–¥–µ–ª–∏:\n"
                            "- agent: –æ–¥–∏–Ω –∏–∑ 'profile', 'health', 'task', 'cycle', 'relationship';\n"
                            "- mode: 'assertion' –∏–ª–∏ 'question';\n"
                            "- field: –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'height_cm', 'sleep_advice', 'task_name');\n"
                            "- value: –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
                            "–û—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n"
                            "{\"agent\": ..., \"mode\": ..., \"field\": ..., \"value\": ...}\n\n"
                            "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏ –≤—ã–±–æ—Ä –ø–æ–ª–µ–π:\n"
                            "\"–õ—é–±–ª—é —Ç—Ä–∏–ª–ª–µ—Ä—ã\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_genre\", \"value\": \"—Ç—Ä–∏–ª–ª–µ—Ä\"}\n"
                            "\"–ú–æ–π –ª—é–±–∏–º—ã–π —Ñ–∏–ª—å–º ‚Äî –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_movie\", \"value\": \"–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä\"}\n"
                            "\"–û–±–æ–∂–∞—é –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_actor\", \"value\": \"–õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ\"}\n"
                            "\"–õ—é–±–∏–º–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî Queen\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_band\", \"value\": \"Queen\"}\n"
                            "\"–Ø —Å–ª—É—à–∞—é —Ä–æ–∫\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"music_preference\", \"value\": \"—Ä–æ–∫\"}\n"
                            "\"–Ø –ª—é–±–ª—é –ø–ª–æ–≤\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"hot_dishes\", \"value\": \"–ø–ª–æ–≤\"}\n"
                            "\"–õ—é–±–ª—é –ø–∏—Ü—Ü—É\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_pizza\", \"value\": \"–ø–∏—Ü—Ü–∞\"}\n"
                            "\"–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –∞–ø–µ–ª—å—Å–∏–Ω—ã\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_fruits_and_berries\", \"value\": \"–∞–ø–µ–ª—å—Å–∏–Ω—ã\"}\n"
                            "\"–Ø –ª—é–±–ª—é –∫–æ—Ñ–µ\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_drink\", \"value\": \"–∫–æ—Ñ–µ\"}\n"
                            "\"–ù–æ—à—É –∫—Ä–æ—Å—Å–æ–≤–∫–∏\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"shoes\", \"value\": \"–∫—Ä–æ—Å—Å–æ–≤–∫–∏\"}\n"
                            "\"–õ—é–±–ª—é casual —Å—Ç–∏–ª—å\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"style\", \"value\": \"casual\"}\n"
                            "\"–û–±–æ–∂–∞—é –≤—ã—Å—Ç–∞–≤–∫–∏\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"exhibitions\", \"value\": \"–≤—ã—Å—Ç–∞–≤–∫–∏\"}\n"
                            "\"–õ—é–±–ª—é —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_books\", \"value\": \"–∫–Ω–∏–≥–∏\"}\n"
                            "\"–Ø —Ä–∞–±–æ—Ç–∞—é –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"career\", \"value\": \"–¥–∏–∑–∞–π–Ω–µ—Ä\"}\n"
                            "\"–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"professional_interests\", \"value\": \"–º–∞—Ä–∫–µ—Ç–∏–Ω–≥\"}\n"
                            "\"–õ—é–±–ª—é —Ä–æ–∑—ã\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_flowers\", \"value\": \"—Ä–æ–∑—ã\"}\n"
                            "\"–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ç—é–ª—å–ø–∞–Ω—ã\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"favorite_flowers\", \"value\": \"—Ç—é–ª—å–ø–∞–Ω—ã\"}\n"
                            "\"–ü–æ–ª—å–∑—É—é—Å—å –∞—Ä–≥–∞–Ω–æ–≤—ã–º –º–∞—Å–ª–æ–º –¥–ª—è –≤–æ–ª–æ—Å\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"haircare\", \"value\": \"–∞—Ä–≥–∞–Ω–æ–≤–æ–µ –º–∞—Å–ª–æ\"}\n"
                            "\"–Ø –∏—Å–ø–æ–ª—å–∑—É—é —Å—ã–≤–æ—Ä–æ—Ç–∫—É —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º C\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"skincare\", \"value\": \"—Å—ã–≤–æ—Ä–æ—Ç–∫–∞ —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º C\"}\n"
                            "\"–û–±–æ–∂–∞—é –ø–∞—Ä—Ñ—é–º —Å –≤–∞–Ω–∏–ª—å—é\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"perfume\", \"value\": \"–≤–∞–Ω–∏–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç\"}\n"
                            "\"–ü–æ–∫—É–ø–∞—é –æ—Å–≤–µ–∂–∏—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞\" ‚Üí {\"agent\": \"profile\", \"mode\": \"assertion\", \"field\": \"homecare\", \"value\": \"–æ—Å–≤–µ–∂–∏—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞\"}\n"
                        )
                    },
                    {"role": "user", "content": text}
                ],
            )

            content = response.choices[0].message.content
            logger.info(f"GPT structured response: {content}")

            data = json.loads(content)
            agent = data.get("agent")
            mode = data.get("mode")
            raw_field = data.get("field")
            value = data.get("value")

            if not agent or not mode:
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞."

            user_echo = f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: \"{text}\"."

            # --- üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è
            field_key = normalize_field(raw_field)
            if not field_key:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –æ—Ç GPT: {raw_field}")
                return f"{user_echo} ‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω—è–ª, –∫ –∫–∞–∫–æ–º—É –ø–æ–ª—é —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è."

            # === Profile Agent ===
            if agent == "profile":
                if mode == "assertion":
                    await self.general_agent.save_data(user_id, field_key, value, image_path=image_path)
                    display_name = field_names.get(field_key, field_key)
                    return f"{user_echo} –°–æ—Ö—Ä–∞–Ω–∏–ª: {display_name} ‚Äî {value}."
                elif mode == "question":
                    result = await self.general_agent.get_data(user_id, field_key)
                    return f"{user_echo} –û—Ç–≤–µ—Ç: {result or '–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}."

            # === Health Agent ===
            elif agent == "health":
                return await self.health_agent.handle(user_id, mode, field_key, value, user_echo)

            # === Task Agent ===
            elif agent == "task":
                return await self.task_agent.handle(user_id, mode, field_key, value, user_echo)

            # === Cycle Agent ===
            elif agent == "cycle":
                return await self.cycle_agent.handle(user_id, mode, field_key, value, user_echo)

            # === Relationship Agent ===
            elif agent == "relationship":
                return await self.relationship_agent.handle(user_id, mode, field_key, value, user_echo)

            return f"{user_echo} –ê–≥–µ–Ω—Ç '{agent}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ JSON –æ—Ç GPT: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç GPT."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
