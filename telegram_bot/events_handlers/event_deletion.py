from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_events import delete_event_by_title, get_user_events, get_event_by_title
import asyncpg

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_delete_markup = ReplyKeyboardMarkup(
    [["üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–±—ã—Ç–∏–π
async def handle_event_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool | str:
    text = update.message.text
    state = context.user_data.get("state")
    user_id = str(update.effective_user.id)

    # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    if text == "üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        try:
            events = await get_user_events(user_id)
        except asyncpg.PostgresError as e:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return True

        if not events:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return True

        context.user_data["state"] = "awaiting_event_deletion_selection"
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º: "–Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –¥–∞—Ç–∞" –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º: –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–ª—è –ø–æ–∏—Å–∫–∞)
        context.user_data["deletable_events"] = {
            f"{e['title']} ‚Äî {e['date'].strftime('%Y-%m-%d')}": e["title"] for e in events
        }

        event_titles = list(context.user_data["deletable_events"].keys())
        keyboard = [[title] for title in event_titles] + [["‚ùå –û—Ç–º–µ–Ω–∞"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return True

    # –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞
    if state == "awaiting_event_deletion_selection":
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_menu"

        deletable = context.user_data.get("deletable_events", {})
        if text not in deletable:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return True

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–æ–±—ã—Ç–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        title = deletable[text]
        try:
            event = await get_event_by_title(user_id, title)
        except asyncpg.PostgresError:
            event = None

        if not event:
            context.user_data.clear()
            await update.message.reply_text(
                "‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
            return "refresh_menu"

        date_str = event["date"].strftime('%Y-%m-%d')
        description = event.get("description", "")
        confirmation_text = (
            f"–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ:\n\n"
            f"üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
            f"üìÜ –î–∞—Ç–∞: {date_str}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else '–Ω–µ—Ç'}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        )
        context.user_data["state"] = "confirm_event_deletion"
        context.user_data["event_to_delete"] = title
        await update.message.reply_text(
            confirmation_text,
            reply_markup=confirm_delete_markup
        )
        return True

    # –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if state == "confirm_event_deletion":
        if text == "üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ":
            title = context.user_data.get("event_to_delete")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                event = await get_event_by_title(user_id, title)
                if not event:
                    await update.message.reply_text("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
                    context.user_data.clear()
                    return "refresh_menu"

                await delete_event_by_title(user_id, title)
            except asyncpg.PostgresError:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return True

            context.user_data.clear()
            await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{title}¬ª —É–¥–∞–ª–µ–Ω–æ.")
            return "refresh_menu"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_menu"

        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=confirm_delete_markup)
            return True

    return False
