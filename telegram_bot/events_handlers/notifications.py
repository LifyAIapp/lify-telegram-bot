from datetime import date, timedelta
from telegram import Bot
from database.db_events import get_upcoming_events, get_event_participants, get_wishlist

async def get_wishlists_for_participants(user_ids: list) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {user_id: [item_name, ...], ...}
    """
    wishlists = {}
    for user_id in user_ids:
        items = await get_wishlist(user_id)
        wishlists[user_id] = [item['item_name'] for item in items] if items else []
    return wishlists

async def send_event_notifications(bot: Bot, days_before: int = 3):
    """
    –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —á–µ—Ä–µ–∑ days_before –¥–Ω–µ–π, –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.
    """
    target_date = date.today() + timedelta(days=days_before)
    events = await get_upcoming_events(None, days_before=days_before)  # None ‚Äî –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    for event in events:
        event_id = event['event_id']
        title = event['title']
        event_date = event['date'].strftime("%Y-%m-%d")
        is_shared = event.get('is_shared', False)

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
        participants = await get_event_participants(event_id)
        participant_ids = [p['user_id'] for p in participants]

        # –ü–æ–ª—É—á–∞–µ–º –≤–∏—à–ª–∏—Å—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        wishlists = await get_wishlists_for_participants(participant_ids)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_lines = [
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ {days_before} –¥–Ω—è(–µ–π) —Å–æ–±—ã—Ç–∏–µ '{title}' ‚Äî {event_date}!"
        ]

        if is_shared:
            msg_lines.append("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è –∏ –∏—Ö –≤–∏—à–ª–∏—Å—Ç—ã:")
            for user_id in participant_ids:
                items = wishlists.get(user_id, [])
                if items:
                    items_str = ", ".join(items)
                else:
                    items_str = "–í–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç"
                msg_lines.append(f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {items_str}")
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ (–Ω–µ –æ–±—â–µ–≥–æ) —Å–æ–±—ã—Ç–∏—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏—à–ª–∏—Å—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
            owner_wishlist = await get_wishlist(event['owner_user_id'])
            if owner_wishlist:
                items_str = ", ".join(item['item_name'] for item in owner_wishlist)
                msg_lines.append(f"üéÅ –í–∞—à –≤–∏—à–ª–∏—Å—Ç: {items_str}")

        message_text = "\n".join(msg_lines)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É, –µ—Å–ª–∏ –Ω–µ –æ–±—â–µ–µ)
        targets = participant_ids if is_shared else [event['owner_user_id']]

        for user_id in targets:
            try:
                await bot.send_message(chat_id=user_id, text=message_text)
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
