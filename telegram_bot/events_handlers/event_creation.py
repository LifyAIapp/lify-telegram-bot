from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
from database.db_events import create_event, add_event_participant
from database.db_users import find_user_by_username
from telegram_bot.utils.context_cleanup import clear_events_context

# üìÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def confirm_event_keyboard():
    return ReplyKeyboardMarkup([["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)

# üß© –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def handle_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text.strip()
    user_id = str(update.effective_user.id)
    state = context.user_data.get("state")

    # –®–∞–≥ 1: –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
    if state == "awaiting_event_title":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            clear_events_context(context)
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        if not text:
            await update.message.reply_text("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
            return
        context.user_data["new_event_title"] = text
        context.user_data["state"] = "awaiting_event_participants"
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return

    # –®–∞–≥ 2: –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if state == "awaiting_event_participants":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            clear_events_context(context)
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        context.user_data["event_participants"] = []
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            usernames = [u.strip().lstrip("@") for u in text.split(",") if u.strip()]
            for username in usernames:
                user = await find_user_by_username(username)
                if user:
                    context.user_data["event_participants"].append(user["user_id"])

        context.user_data["state"] = "awaiting_event_date"
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return

    # –®–∞–≥ 3: –í–≤–æ–¥ –¥–∞—Ç—ã
    if state == "awaiting_event_date":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            clear_events_context(context)
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        try:
            date_obj = datetime.strptime(text, "%Y-%m-%d").date()
            context.user_data["new_event_date"] = date_obj
            context.user_data["state"] = "confirm_event_preview"

            title = context.user_data.get("new_event_title")
            participants = context.user_data.get("event_participants", [])

            if participants and len(participants) <= 3:
                from database.db_users import get_display_name
                names = []
                for user_id_participant in participants:
                    name = await get_display_name(user_id_participant)
                    names.append(name)
                participant_text = "–£—á–∞—Å—Ç–Ω–∏–∫–∏: " + ", ".join(names)
            elif participants:
                participant_text = f"{len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            else:
                participant_text = "–ë–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

            date_str = date_obj.strftime("%Y-%m-%d")

            preview = f"üìÖ <b>{title}</b>\nüìÜ –î–∞—Ç–∞: {date_str}\nüë• {participant_text}"
            await update.message.reply_text(
                preview,
                reply_markup=confirm_event_keyboard(),
                parse_mode="HTML"
            )
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    # –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if state == "confirm_event_preview":
        if text.lower() == "‚úÖ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            event_id = await create_event(
                owner_user_id=user_id,
                title=context.user_data["new_event_title"],
                description="",
                date=context.user_data["new_event_date"],
                is_shared=bool(context.user_data.get("event_participants"))
            )
            for friend_id in context.user_data.get("event_participants", []):
                await add_event_participant(event_id, friend_id)

            clear_events_context(context)  # ‚úÖ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")
            return

        elif text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å":
            clear_events_context(context)
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        else:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")
