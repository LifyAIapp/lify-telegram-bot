from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from database.db_events import add_wishlist_item, remove_wishlist_item, get_wishlist
from telegram_bot.utils.context_cleanup import clear_events_context
import asyncio

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def wishlist_main_keyboard():
    buttons = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫", "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def confirm_keyboard():
    return ReplyKeyboardMarkup([["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def skip_keyboard():
    return ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–∏—à–ª–∏—Å—Ç–∞
async def show_wishlist_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_events_context(context)
    context.user_data["state"] = "wishlist_menu"

    user_id = str(update.effective_user.id)
    wishlist = await get_wishlist(user_id)

    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())
    await asyncio.sleep(0.2)

    if wishlist:
        for item in wishlist:
            caption = f"üéÅ <b>{item['item_name']}</b>"
            if item.get("note"):
                caption += f"\nüìù {item['note']}"
            if item.get("photo_file_id"):
                await update.message.reply_photo(photo=item['photo_file_id'], caption=caption, parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(caption, parse_mode=ParseMode.HTML)
        await update.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=wishlist_main_keyboard())
    else:
        await update.message.reply_text("üì≠ –í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç.", reply_markup=wishlist_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–∏—à–ª–∏—Å—Ç–∞
async def handle_wishlist_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("state")
    text = update.message.text.strip() if update.message.text else None
    user_id = str(update.effective_user.id)

    if state == "wishlist_menu":
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
            context.user_data["state"] = "wishlist_adding_name"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
            return

        if text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫":
            wishlist = await get_wishlist(user_id)
            if not wishlist:
                await update.message.reply_text("–í–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
                return
            context.user_data["state"] = "wishlist_deleting_select"
            context.user_data["wishlist_items"] = wishlist
            buttons = [[f"{item['item_name']}"] for item in wishlist]
            buttons.append(["üîô –ù–∞–∑–∞–¥"])
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return

        if text == "üîô –ù–∞–∑–∞–¥":
            from telegram_bot.events_handlers.events_handlers import show_events_menu
            await show_events_menu(update, context)
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏.")
        return

    if state == "wishlist_adding_name":
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await show_wishlist_menu(update, context)
            return
        context.user_data["new_wishlist_name"] = text
        context.user_data["state"] = "wishlist_adding_note"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=skip_keyboard())
        return

    if state == "wishlist_adding_note":
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await show_wishlist_menu(update, context)
            return
        if text and text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data["new_wishlist_note"] = text
        else:
            context.user_data["new_wishlist_note"] = ""
        context.user_data["state"] = "wishlist_adding_photo"
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=skip_keyboard())
        return

    if state == "wishlist_adding_photo":
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            context.user_data["new_wishlist_photo"] = file_id
        elif text and text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data["new_wishlist_photo"] = None
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await show_wishlist_menu(update, context)
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return

        context.user_data["state"] = "wishlist_adding_confirm"
        caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['new_wishlist_name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('new_wishlist_note','')}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:"

        if context.user_data["new_wishlist_photo"]:
            await update.message.reply_photo(photo=context.user_data["new_wishlist_photo"], caption=caption, reply_markup=confirm_keyboard())
        else:
            await update.message.reply_text(caption, reply_markup=confirm_keyboard())
        return

    if state == "wishlist_adding_confirm":
        if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
            await add_wishlist_item(
                user_id=user_id,
                item_name=context.user_data["new_wishlist_name"],
                note=context.user_data.get("new_wishlist_note", ""),
                photo_file_id=context.user_data.get("new_wishlist_photo")
            )
            await update.message.reply_text("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏—à–ª–∏—Å—Ç!")
            await show_wishlist_menu(update, context)
            return
        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await show_wishlist_menu(update, context)
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.")
            return

    if state == "wishlist_deleting_select":
        if text == "üîô –ù–∞–∑–∞–¥":
            await show_wishlist_menu(update, context)
            return
        wishlist_items = context.user_data.get("wishlist_items", [])
        for item in wishlist_items:
            if item["item_name"] == text:
                await remove_wishlist_item(user_id, item["wishlist_id"])
                await update.message.reply_text(f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ '{text}' —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞.")
                await show_wishlist_menu(update, context)
                return
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ '–ù–∞–∑–∞–¥'.")
        return

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
