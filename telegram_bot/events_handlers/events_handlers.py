from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
from database.db_events import (
    create_event, update_event, delete_event,
    add_event_participant, remove_event_participant,
    get_user_events, get_upcoming_events,
    add_wishlist_item, remove_wishlist_item, get_wishlist
)
from telegram_bot.utils.context_cleanup import clear_events_context

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –°–æ–±—ã—Ç–∏—è
def main_events_menu():
    buttons = [
        ["üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"],
        ["‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "üéÅ –í–∏—à–ª–∏—Å—Ç"],
        ["üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
def confirm_keyboard():
    return ReplyKeyboardMarkup([["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"]], resize_keyboard=True)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞
async def show_events_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    clear_events_context(context)
    context.user_data["state"] = "events_menu"
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –°–æ–±—ã—Ç–∏—è:",
        reply_markup=main_events_menu()
    )

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ª–æ–≥–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º —Ä–∞–∑–¥–µ–ª–∞
async def handle_events_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("state")
    text = update.message.text.strip()
    user_id = str(update.effective_user.id)

    if state == "events_menu":
        if text == "üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è":
            events = await get_user_events(user_id)
            if not events:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
            else:
                msg = "\n".join([f"{e['title']} ‚Äî {e['date'].strftime('%Y-%m-%d')}" for e in events])
                await update.message.reply_text(f"–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n{msg}")
            return

        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
            context.user_data["state"] = "awaiting_event_title"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
            return

        if text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
            upcoming = await get_upcoming_events(user_id, days_before=3)
            if not upcoming:
                await update.message.reply_text("–ù–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è.")
            else:
                msg = "\n".join([f"{e['title']} ‚Äî {e['date'].strftime('%Y-%m-%d')}" for e in upcoming])
                await update.message.reply_text(f"–ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è:\n{msg}")
            return

        if text == "üéÅ –í–∏—à–ª–∏—Å—Ç":
            wishlist = await get_wishlist(user_id)
            if not wishlist:
                await update.message.reply_text("–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç.")
            else:
                msg = "\n".join([f"{item['item_name']} ‚Äî {item.get('note', '')}" for item in wishlist])
                await update.message.reply_text(f"–í–∞—à –≤–∏—à–ª–∏—Å—Ç:\n{msg}")
            return

        if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            clear_events_context(context)
            await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é.")
        return

    # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    if state == "awaiting_event_title":
        context.user_data["new_event_title"] = text
        context.user_data["state"] = "awaiting_event_date"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    # –í–≤–æ–¥ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
    if state == "awaiting_event_date":
        try:
            date_obj = datetime.strptime(text, "%Y-%m-%d").date()
            context.user_data["new_event_date"] = date_obj
            context.user_data["state"] = "awaiting_event_description"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        except ValueError:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    if state == "awaiting_event_description":
        context.user_data["new_event_description"] = text if text else ""
        context.user_data["state"] = "awaiting_event_shared"
        kb = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True)
        await update.message.reply_text(
            "–≠—Ç–æ –æ–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã –¥–ª—è –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫)",
            reply_markup=kb
        )
        return

    # –í–≤–æ–¥ —Ñ–ª–∞–≥–∞ –æ–±—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    if state == "awaiting_event_shared":
        is_shared = text.lower() == "–¥–∞"
        context.user_data["new_event_shared"] = is_shared

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_id = await create_event(
            owner_user_id=user_id,
            title=context.user_data["new_event_title"],
            description=context.user_data["new_event_description"],
            date=context.user_data["new_event_date"],
            is_shared=is_shared
        )

        if is_shared:
            context.user_data["new_event_id"] = event_id
            context.user_data["state"] = "awaiting_add_participants"
            await update.message.reply_text(
                "–û–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –í–≤–µ–¥–∏—Ç–µ @username —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
            )
        else:
            clear_events_context(context)
            await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.")
        return

    # –í–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
    if state == "awaiting_add_participants":
        if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            clear_events_context(context)
            await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        usernames = [u.strip().lstrip("@") for u in text.split(",")]
        event_id = context.user_data["new_event_id"]

        added = 0
        for username in usernames:
            # –¢—É—Ç –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ user_id –ø–æ username (–Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ db_users.py)
            from database.db_users import find_user_by_username
            user = await find_user_by_username(username)
            if user:
                await add_event_participant(event_id, user["user_id"])
                added += 1

        clear_events_context(context)
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {added}. –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏—à–ª–∏—Å—Ç–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
    if state == "wishlist_menu":
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
            context.user_data["state"] = "wishlist_adding"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞:")
            return

        if text == "üîô –ù–∞–∑–∞–¥":
            await show_events_menu(update, context)
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏.")
        return

    if state == "wishlist_adding":
        await add_wishlist_item(user_id, text)
        context.user_data["state"] = "wishlist_menu"
        await update.message.reply_text("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏—à–ª–∏—Å—Ç.")
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø–æ–∑–Ω–∞–Ω–æ
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
