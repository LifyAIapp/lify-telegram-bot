from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_friends import add_friend, is_friend_exists, fetch_all_user_sections, set_access_right
from database.db_users import find_user_by_username
from telegram_bot.utils.context_cleanup import clear_friends_context

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def build_role_keyboard():
    return ReplyKeyboardMarkup(
        [["üë§ –î—Ä—É–≥", "üë®‚Äçüë©‚Äçüëß –°–µ–º—å—è"], ["üíº –ö–æ–ª–ª–µ–≥–∞", "‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True
    )

def build_save_cancel_keyboard():
    return ReplyKeyboardMarkup(
        [["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True
    )

# –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
async def start_friend_addition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["state"] = "awaiting_friend_username"
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ @username –¥—Ä—É–≥–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
async def handle_friend_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("state")
    text = update.message.text.strip()
    user_id = str(update.effective_user.id)

    if state == "awaiting_friend_username":
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            clear_friends_context(context)
            return "refresh_friends"

        if not text.startswith("@"): 
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username")
            return True

        username = text[1:]
        target_user = await find_user_by_username(username)

        if not target_user:
            await update.message.reply_text("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return True

        if user_id == target_user["user_id"]:
            await update.message.reply_text("üòÖ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return True

        context.user_data["pending_friend_user_id"] = target_user["user_id"]
        context.user_data["pending_friend_display_name"] = target_user["display_name"]
        context.user_data["state"] = "choose_friend_role"

        await update.message.reply_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –¥—Ä—É–≥–∞:", reply_markup=build_role_keyboard())
        return True

    elif state == "choose_friend_role":
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            clear_friends_context(context)
            return "refresh_friends"

        context.user_data["pending_friend_role"] = text
        context.user_data["state"] = "choose_access_sections"

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        sections = await fetch_all_user_sections(user_id)
        context.user_data["all_sections"] = sections
        context.user_data["selected_sections"] = set()

        buttons = [[("‚úÖ " + s["emoji"] + " " + s["name"])] for s in sections] + [["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("üîê –û—Ç–º–µ—Ç—å—Ç–µ, –∫ –∫–∞–∫–∏–º —Ä–∞–∑–¥–µ–ª–∞–º —É –¥—Ä—É–≥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø:", reply_markup=markup)
        return True

    elif state == "choose_access_sections":
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            clear_friends_context(context)
            return "refresh_friends"

        if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            context.user_data["state"] = "confirm_friend_creation"
            await update.message.reply_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞:", reply_markup=build_save_cancel_keyboard())
            return True

        clean_text = text[2:].strip()  # —É–±–∏—Ä–∞–µ–º ‚úÖ
        for section in context.user_data["all_sections"]:
            label = f"{section['emoji']} {section['name']}"
            if label == clean_text:
                name = section["name"]
                selected = context.user_data["selected_sections"]
                if name in selected:
                    selected.remove(name)
                else:
                    selected.add(name)
                # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
                buttons = []
                for s in context.user_data["all_sections"]:
                    marker = "‚úÖ" if s["name"] in selected else "‚ùå"
                    buttons.append([f"{marker} {s['emoji']} {s['name']}"])
                buttons.append(["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"])
                await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
                return True

        return True

    elif state == "confirm_friend_creation":
        friend_user_id = context.user_data.get("pending_friend_user_id")
        display_name = context.user_data.get("pending_friend_display_name")
        role = context.user_data.get("pending_friend_role")
        selected_sections = context.user_data.get("selected_sections", set())

        if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            if await is_friend_exists(user_id, friend_user_id):
                await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π.")
            else:
                await add_friend(user_id, friend_user_id, role)
                for section in selected_sections:
                    await set_access_right(user_id, friend_user_id, section, True)
                await update.message.reply_text("‚úÖ –î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            clear_friends_context(context)
            return "refresh_friends"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await update.message.reply_text("üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            clear_friends_context(context)
            return "refresh_friends"

        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
            return True

    return False
