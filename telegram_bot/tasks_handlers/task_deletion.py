from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_tasks import get_tasks_for_date, delete_task
from datetime import date

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_delete_markup = ReplyKeyboardMarkup(
    [["üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
async def handle_task_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool | str:
    text = update.message.text.strip()
    state = context.user_data.get("tasks_state")
    user_id = str(update.effective_user.id)

    # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = await get_tasks_for_date(user_id, date.today())

        if not tasks:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return True

        context.user_data["tasks_state"] = "awaiting_task_deletion_selection"
        context.user_data["deletable_tasks"] = {
            f"{t['description']}": t["task_id"] for t in tasks
        }

        task_titles = list(context.user_data["deletable_tasks"].keys())
        keyboard = [[title] for title in task_titles] + [["‚ùå –û—Ç–º–µ–Ω–∞"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return True

    # –®–∞–≥ 2: –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
    if state == "awaiting_task_deletion_selection":
        if text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_tasks"

        deletable = context.user_data.get("deletable_tasks", {})
        if text not in deletable:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return True

        context.user_data["task_to_delete"] = {
            "title": text,
            "task_id": deletable[text]
        }
        context.user_data["tasks_state"] = "confirm_task_deletion"

        await update.message.reply_text(
            f"–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É:\n\n‚Ä¢ {text}\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=confirm_delete_markup
        )
        return True

    # –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if state == "confirm_task_deletion":
        if text == "üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ":
            task = context.user_data.get("task_to_delete")
            if not task:
                await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                context.user_data.clear()
                return "refresh_tasks"

            await delete_task(task["task_id"])
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ ¬´{task['title']}¬ª —É–¥–∞–ª–µ–Ω–∞.")
            context.user_data.clear()
            return "refresh_tasks"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_tasks"

        else:
            await update.message.reply_text(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                reply_markup=confirm_delete_markup
            )
            return True

    return False
