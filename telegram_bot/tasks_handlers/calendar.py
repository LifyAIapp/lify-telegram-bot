from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_tasks import get_tasks_for_date
from datetime import datetime

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
back_markup = ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á
async def handle_calendar_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = str(update.effective_user.id)

    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–¥–∞—á
    if text == "üîô –ù–∞–∑–∞–¥":
        from telegram_bot.tasks_handlers.tasks_handlers import show_tasks_menu
        await show_tasks_menu(update, context)
        return

    try:
        chosen_date = datetime.strptime(text, "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    tasks = await get_tasks_for_date(user_id, chosen_date)
    if not tasks:
        await update.message.reply_text(f"üì≠ –ó–∞–¥–∞—á –Ω–∞ {chosen_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=back_markup)
    else:
        msg = f"üìÜ *–ó–∞–¥–∞—á–∏ –Ω–∞ {chosen_date}:*\n" + "\n".join(
            [f"‚Ä¢ {t['description']}" + (" ‚úÖ" if t['is_done'] else "") for t in tasks]
        )
        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=back_markup)
