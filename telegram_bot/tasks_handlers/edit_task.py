from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_tasks import get_tasks_for_date, update_task
from datetime import date, datetime

def back_or_skip_keyboard():
    return ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def handle_task_editing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text.strip() if update.message.text else ""
    state = context.user_data.get("tasks_state")

    # –®–∞–≥ 1 ‚Äî –≤—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if state == "edit_task_choose":
        today = date.today()
        tasks = await get_tasks_for_date(user_id, today)
        for task in tasks:
            if task["description"] in text:
                context.user_data["edit_task_id"] = task["id"]
                context.user_data["tasks_state"] = "edit_task_description"
                await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_or_skip_keyboard())
                return
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –®–∞–≥ 2 ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    if state == "edit_task_description":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data["new_description"] = text

        context.user_data["tasks_state"] = "edit_task_date"
        await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=back_or_skip_keyboard())
        return

    # –®–∞–≥ 3 ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if state == "edit_task_date":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        task_id = context.user_data.get("edit_task_id")
        new_description = context.user_data.get("new_description", None)
        new_date = None

        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            try:
                new_date = datetime.strptime(text, "%Y-%m-%d").date()
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –ì–ì–ì–ì-–ú–ú-–î–î:")
                return

        await update_task(task_id, new_description=new_description, new_date=new_date)
        context.user_data.clear()
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return
