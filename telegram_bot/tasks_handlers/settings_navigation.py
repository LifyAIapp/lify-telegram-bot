from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram_bot.tasks_handlers.tasks_handlers import show_tasks_menu
from telegram_bot.tasks_handlers.task_creation import handle_task_creation
from database.db_tasks import get_tasks_for_date, delete_task  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω delete_task
from datetime import date

async def handle_settings_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip() if update.message.text else ""
    state = context.user_data.get("tasks_state")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if state == "settings_menu":
        if text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É":
            context.user_data["tasks_state"] = "create_task_description"
            await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            return

        if text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É":
            today = date.today()
            user_id = str(update.effective_user.id)
            tasks = await get_tasks_for_date(user_id, today)

            if not tasks:
                await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
                return

            context.user_data["edit_tasks_list"] = tasks
            context.user_data["tasks_state"] = "edit_task_choose"

            buttons = [[task["description"]] for task in tasks]
            buttons.append(["üîô –ù–∞–∑–∞–¥"])
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return

        if text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
            today = date.today()
            user_id = str(update.effective_user.id)
            tasks = await get_tasks_for_date(user_id, today)

            if not tasks:
                await update.message.reply_text("üóë –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            context.user_data["delete_tasks_list"] = tasks
            context.user_data["tasks_state"] = "delete_task_choose"

            buttons = [[task["description"]] for task in tasks]
            buttons.append(["–û—Ç–º–µ–Ω–∞"])
            await update.message.reply_text(
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return

        if text == "üîô –ù–∞–∑–∞–¥":
            await show_tasks_menu(update, context)
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    if state in ["create_task_description", "create_task_date"]:
        await handle_task_creation(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if state == "delete_task_choose":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            await update.message.reply_text("üö´ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            await show_tasks_menu(update, context)
            return

        tasks = context.user_data.get("delete_tasks_list", [])
        selected_task = next((t for t in tasks if t["description"] == text), None)

        if not selected_task:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        await delete_task(selected_task["id"])
        context.user_data.clear()
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        await show_tasks_menu(update, context)
        return
