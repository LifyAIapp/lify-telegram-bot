import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from database.db_tasks import get_tasks_for_date, update_task, delete_task
from datetime import date, datetime

from telegram_bot.tasks_handlers.calendar import handle_calendar_input
from telegram_bot.tasks_handlers.task_creation import handle_task_creation
from telegram_bot.tasks_handlers.task_done import handle_task_done_selection
from telegram_bot.tasks_handlers.settings_navigation import show_settings_menu, handle_settings_navigation
from telegram_bot.tasks_handlers.task_deletion import handle_task_deletion
from telegram_bot.main_menu_handlers.keyboards import main_menu_markup

logger = logging.getLogger(__name__)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ –ó–∞–¥–∞—á–∏
def tasks_main_menu():
    buttons = [
        ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏", "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"],
        ["üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á"],
        ["üè† –õ–æ–±–±–∏"]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–¥–∞—á –∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async def show_tasks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "tasks"  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    context.user_data["tasks_state"] = "menu"
    user_id = str(update.effective_user.id)
    today = date.today()

    tasks = await get_tasks_for_date(user_id, today)

    if not tasks:
        await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    else:
        msg = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n" + "\n".join(
            [f"‚Ä¢ {t['description']}" + (" ‚úÖ" if t['is_done'] else "") for t in tasks]
        )
        await update.message.reply_text(msg, parse_mode="Markdown")

    await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=tasks_main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –∑–∞–¥–∞—á
async def handle_tasks_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get("tasks_state")
    text = update.message.text.strip() if update.message.text else ""

    logger.info(f"[TASKS] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}, —Ç–µ–∫—Å—Ç: {text}")

    # –ü–µ—Ä–µ—Ö–≤–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
    result = await handle_task_deletion(update, context)
    if result == "refresh_tasks":
        logger.info("[TASKS] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
        await show_tasks_menu(update, context)
        return
    elif result:
        return

    if state == "menu":
        if text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏":
            logger.info("[TASKS] –ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á")
            context.user_data["tasks_state"] = "settings_menu"
            await show_settings_menu(update, context)
            return

        if text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ":
            logger.info("[TASKS] –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö")
            user_id = str(update.effective_user.id)
            today = date.today()
            tasks = await get_tasks_for_date(user_id, today)

            if not tasks:
                await update.message.reply_text("‚òëÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.")
                return

            buttons = [[t["description"]] for t in tasks]
            buttons.append(["üè† –õ–æ–±–±–∏"])

            context.user_data["tasks_state"] = "done_choose"
            context.user_data["done_tasks_list"] = tasks
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –µ—ë —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
                reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            )
            return

        if text == "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á":
            logger.info("[TASKS] –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á")
            context.user_data["tasks_state"] = "calendar_input"
            await update.message.reply_text("üìÜ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            return

        if text == "üè† –õ–æ–±–±–∏":
            logger.info("[TASKS] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            context.user_data.clear()
            context.user_data.pop("mode", None)
            await update.message.reply_text("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu_markup)
            return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    elif state == "calendar_input":
        await handle_calendar_input(update, context)
        return

    elif state == "settings_menu":
        await handle_settings_navigation(update, context)
        return

    elif state in ["create_task_description", "create_task_date"]:
        await handle_task_creation(update, context)
        return

    elif state == "edit_task_choose":
        tasks = context.user_data.get("edit_tasks_list", [])
        selected_task = next((t for t in tasks if t["description"] == text), None)

        if not selected_task:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        context.user_data["edit_task_id"] = selected_task["task_id"]
        context.user_data["tasks_state"] = "edit_task_description"

        await update.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return

    elif state == "edit_task_description":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            logger.info("[TASKS] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await update.message.reply_text("üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
            await show_tasks_menu(update, context)
            return

        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            context.user_data["new_task_description"] = text

        context.user_data["tasks_state"] = "edit_task_date"
        await update.message.reply_text(
            "üìÜ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        return

    elif state == "edit_task_date":
        if text.lower() == "–æ—Ç–º–µ–Ω–∞":
            context.user_data.clear()
            logger.info("[TASKS] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await update.message.reply_text("üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
            await show_tasks_menu(update, context)
            return

        task_id = context.user_data.get("edit_task_id")
        new_description = context.user_data.get("new_task_description")
        new_due_date = None

        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            try:
                new_due_date = datetime.strptime(text, "%Y-%m-%d").date()
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
                return

        await update_task(
            task_id=task_id,
            new_description=new_description,
            new_due_date=new_due_date
        )

        context.user_data.clear()
        logger.info("[TASKS] –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        await show_tasks_menu(update, context)
        return

    elif state == "done_choose":
        if text == "üè† –õ–æ–±–±–∏":
            context.user_data.clear()
            context.user_data.pop("mode", None)
            await update.message.reply_text("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu_markup)
            return

        await handle_task_done_selection(update, context)
        return
