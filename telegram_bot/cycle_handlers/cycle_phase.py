import logging
from datetime import datetime
from openai import OpenAI
from telegram import Update
from telegram.ext import ContextTypes

from config import OPENAI_API_KEY
from database.db import get_connection

logger = logging.getLogger(__name__)
client = OpenAI(api_key=OPENAI_API_KEY)


def get_last_cycle_start(user_id: str):
    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT start_date FROM menstrual_cycles
                WHERE user_id = %s AND start_date IS NOT NULL
                ORDER BY start_date DESC
                LIMIT 1
            """, (user_id,))
            row = cur.fetchone()
            return row[0] if row else None


def get_cycle_settings(user_id: str):
    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT cycle_length, period_length FROM cycle_settings
                WHERE user_id = %s
            """, (user_id,))
            row = cur.fetchone()
            return row if row else (28, 5)  # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def determine_cycle_phase(day: int, cycle_length: int, period_length: int):
    if day <= period_length:
        return "–º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞"
    elif day <= 13:
        return "—Ñ–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞"
    elif day == 14:
        return "–æ–≤—É–ª—è—Ü–∏—è"
    elif day <= cycle_length:
        return "–ª—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞"
    else:
        return "–≤–Ω–µ —Ü–∏–∫–ª–∞"


async def get_ai_comment(phase: str, day: int) -> str:
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {phase}, —ç—Ç–æ –¥–µ–Ω—å {day} –∏–∑ —Ü–∏–∫–ª–∞. "
        "–î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Å–æ–≤–µ—Ç –ø–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—é, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. "
        "–§–æ—Ä–º–∞—Ç ‚Äî 1 –∞–±–∑–∞—Ü, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π AI-–¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=120,
            temperature=0.8
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"[AI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {e}")
        return "üí° –ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –æ—Ç AI."


async def show_cycle_phase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    today = datetime.now().date()

    start_date = get_last_cycle_start(user_id)
    if not start_date:
        await update.message.reply_text("üôà –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—á–∞–ª–µ —Ü–∏–∫–ª–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´ü©∏ –ù–∞—á–∞—Ç—å —Ü–∏–∫–ª¬ª.")
        return

    cycle_length, period_length = get_cycle_settings(user_id)
    day = (today - start_date).days + 1

    phase = determine_cycle_phase(day, cycle_length, period_length)
    ai_tip = await get_ai_comment(phase, day)

    text = (
        f"üìÖ *–°–µ–≥–æ–¥–Ω—è:* {today.strftime('%d.%m.%Y')}\n"
        f"üìç –î–µ–Ω—å —Ü–∏–∫–ª–∞: *{day}*\n"
        f"üîÅ –§–∞–∑–∞: *{phase}*\n\n"
        f"{ai_tip}"
    )

    await update.message.reply_text(text, parse_mode='Markdown')
    logger.info(f"[CYCLE] –§–∞–∑–∞: {phase} ‚Äî —Å–æ–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
