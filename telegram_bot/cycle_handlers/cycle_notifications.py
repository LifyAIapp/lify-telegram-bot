from datetime import datetime, timedelta
from telegram import Bot
from database.db_cycle import get_last_cycles
from database.db_users import get_all_users
from config import TELEGRAM_TOKEN

bot = Bot(token=TELEGRAM_TOKEN)

# –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –¥–∞–Ω–Ω—ã–º)
DEFAULT_CYCLE_LENGTH = 28
DEFAULT_PERIOD_LENGTH = 5

def calculate_next_events(cycles):
    if not cycles:
        return None, None
    latest = cycles[0]
    start_str = latest[0]
    if not start_str:
        return None, None

    start_date = datetime.strptime(start_str, "%Y-%m-%d").date()
    next_period = start_date + timedelta(days=DEFAULT_CYCLE_LENGTH)
    next_ovulation = start_date + timedelta(days=14)  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
    return next_period, next_ovulation

async def send_cycle_reminders():
    users = get_all_users()
    for user in users:
        user_id = user["user_id"]
        username = user["username"]
        chat_id = user.get("telegram_chat_id") or user_id  # –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É

        cycles = get_last_cycles(user_id, limit=1)
        next_period, next_ovulation = calculate_next_events(cycles)

        if not next_period:
            continue

        today = datetime.today().date()

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏
        if (next_period - today).days == 1:
            await bot.send_message(
                chat_id=chat_id,
                text="üîî –ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∑–∞—Ä–∞–Ω–µ–µ –∏ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ üíõ"
            )

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –æ–≤—É–ª—è—Ü–∏–∏
        if (next_ovulation - today).days == 1:
            await bot.send_message(
                chat_id=chat_id,
                text="üß¨ –ó–∞–≤—Ç—Ä–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–≤—É–ª—è—Ü–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤–æ—ë —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ üå∏"
            )
