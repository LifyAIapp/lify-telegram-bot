from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram_bot.utils.context_cleanup import clear_profile_context
from telegram_bot.profile_handlers.section_creation import handle_section_creation
from telegram_bot.profile_handlers.section_deletion import handle_section_deletion
from telegram_bot.profile_handlers.section_rename import handle_section_rename
from telegram_bot.profile_handlers.object_creation import handle_object_creation
from database.db_profile import (
    fetch_sections_by_parent,
    fetch_section_by_name,
    insert_section_if_not_exists,
    copy_default_sections,
    is_user_initialized,
    mark_user_initialized,
    fetch_objects_by_section,
    delete_object_by_id,
)

DEFAULT_SECTIONS = [
    {"emoji": "üë§", "name": "–û–±—â–µ–µ"},
    {"emoji": "üé¨", "name": "–ö–∏–Ω–æ"},
    {"emoji": "üéµ", "name": "–ú—É–∑—ã–∫–∞"},
    {"emoji": "üçî", "name": "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏"},
    {"emoji": "üß¥", "name": "–£—Ö–æ–¥"},
    {"emoji": "ü¶ï", "name": "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥"},
    {"emoji": "üéØ", "name": "–•–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã"},
    {"emoji": "üåç", "name": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"},
    {"emoji": "üí™", "name": "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å"},
    {"emoji": "üíº", "name": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã"},
    {"emoji": "üå∏", "name": "–¶–≤–µ—Ç—ã"},
]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def build_cancel_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def build_root_section_keyboard(sections):
    keyboard = [[f"{s['emoji']} {s['name']}"] for s in sections]
    keyboard.append(["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª"])
    keyboard.append(["üè† –õ–æ–±–±–∏"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_subsection_keyboard(subsections):
    keyboard = [[f"{s['emoji']} {s['name']}"] for s in subsections]
    keyboard.append(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª"])
    keyboard.append(["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤"])
    keyboard.append(["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–¥–µ–ª–∞"])
    keyboard.append(["üè† –õ–æ–±–±–∏", "üîô –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def build_section_keyboard():
    return ReplyKeyboardMarkup([
        ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤"],
        ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–¥–µ–ª–∞"],
        ["üè† –õ–æ–±–±–∏", "üîô –ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

def build_object_keyboard():
    return ReplyKeyboardMarkup([
        ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤"],
        ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞"],
        ["üè† –õ–æ–±–±–∏", "üîô –ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

def build_object_settings_keyboard():
    return ReplyKeyboardMarkup([
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç"],
        ["üîô –ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

def build_section_settings_keyboard():
    return ReplyKeyboardMarkup([
        ["‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª"],
        ["üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª"],
        ["üîô –ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

def build_subsection_settings_keyboard():
    return ReplyKeyboardMarkup([
        ["‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª"],
        ["üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª"],
        ["üîô –ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

# --- –ü—Ä–æ—Ñ–∏–ª—å ---
async def ensure_default_sections(user_id: str):
    if not await is_user_initialized(user_id):
        for section in DEFAULT_SECTIONS:
            await insert_section_if_not_exists(user_id, section["name"], section["emoji"], None)
        await copy_default_sections(user_id)
        await mark_user_initialized(user_id)

async def show_profile_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram_bot.utils.context_cleanup import clear_profile_context

    user_id = str(update.effective_user.id)
    await ensure_default_sections(user_id)

    clear_profile_context(context)  # ‚Üê –Ω–µ —Å—Ç–∏—Ä–∞–µ—Ç mode
    sections = await fetch_sections_by_parent(user_id, None)
    context.user_data["section_names"] = [s["name"] for s in sections]
    
    await update.message.reply_text("üìÇ –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=build_root_section_keyboard(sections))

async def show_subsections(update: Update, context: ContextTypes.DEFAULT_TYPE, section_id: str):
    user_id = str(update.effective_user.id)
    parent = await fetch_section_by_name(user_id, section_id)
    if not parent:
        await update.message.reply_text("‚ö†Ô∏è –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    context.user_data.update({
        "selected_section": section_id,
        "selected_section_id": parent["id"],
        "current_section_id": parent["id"],
        "is_subsection_level": True
    })

    subsections = await fetch_sections_by_parent(user_id, parent["id"])
    if subsections:
        await update.message.reply_text(f"üìÅ –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã ¬´{section_id}¬ª:", reply_markup=build_subsection_keyboard(subsections))
    else:
        await update.message.reply_text(f"üìÅ –í —Ä–∞–∑–¥–µ–ª–µ ¬´{section_id}¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.", reply_markup=build_section_keyboard())

async def show_objects_in_subsection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    section_id = context.user_data.get("selected_subsection_id") or context.user_data.get("selected_section_id")

    if not section_id:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏–ª–∏ —Ä–∞–∑–¥–µ–ª.")
        return

    context.user_data["current_section_id"] = section_id

    objects = await fetch_objects_by_section(user_id, section_id)
    for obj in objects:
        msg = f"üìå *{obj['name']}*"
        if obj["description"]:
            msg += f"\n_{obj['description']}_"
        if obj["photo_file_id"]:
            await update.message.reply_photo(obj["photo_file_id"], caption=msg, parse_mode='Markdown')
        else:
            await update.message.reply_text(msg, parse_mode='Markdown')

    await update.message.reply_text("üì¶ –û–±—ä–µ–∫—Ç—ã:", reply_markup=build_object_keyboard())

async def handle_profile_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞
    if context.user_data.get("mode") != "profile":
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        return

    text = update.message.text

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        clear_profile_context(context)
        await show_profile_menu(update, context)
        return

    if text == "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª":
        context.user_data["state"] = "awaiting_section_rename"
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:", reply_markup=build_cancel_keyboard())
        return

    if text == "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª":
        context.user_data["state"] = "awaiting_subsection_rename"
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:", reply_markup=build_cancel_keyboard())
        return

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç":
        context.user_data["state"] = "awaiting_object_name"
        await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=build_cancel_keyboard())
        return

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª":
        context.user_data["state"] = "awaiting_section_name"
        await update.message.reply_text("üìÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:", reply_markup=build_cancel_keyboard())
        return

    rename_result = await handle_section_rename(update, context)
    if rename_result == "refresh_menu":
        if context.user_data.get("selected_section"):
            await show_subsections(update, context, context.user_data["selected_section"])
        else:
            await show_profile_menu(update, context)
        return
    elif rename_result:
        return

    deletion_result = await handle_section_deletion(update, context)
    if deletion_result == "refresh_menu":
        if context.user_data.get("selected_section"):
            await show_subsections(update, context, context.user_data["selected_section"])
        else:
            await show_profile_menu(update, context)
        return
    elif deletion_result:
        return

    creation_result = await handle_section_creation(update, context)
    if creation_result == "refresh_menu":
        if context.user_data.get("selected_section"):
            await show_subsections(update, context, context.user_data["selected_section"])
        else:
            await show_profile_menu(update, context)
        return
    elif creation_result:
        return

    object_result = await handle_object_creation(update, context)
    if object_result == "refresh_objects":
        await show_objects_in_subsection(update, context)
        return
    elif object_result:
        return

    if text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤":
        context.user_data["navigation_context"] = "object_settings"
        await update.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:", reply_markup=build_object_settings_keyboard())
        return

    if text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–¥–µ–ª–∞":
        context.user_data["navigation_context"] = "section_settings"
        await update.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–¥–µ–ª–∞:", reply_markup=build_section_settings_keyboard())
        return

    if text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞":
        context.user_data["navigation_context"] = "subsection_settings"
        await update.message.reply_text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:", reply_markup=build_subsection_settings_keyboard())
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        nav = context.user_data.pop("navigation_context", None)
        if nav:
            await show_objects_in_subsection(update, context)
            return
        if context.user_data.get("selected_subsection"):
            await show_subsections(update, context, context.user_data["selected_section"])
            context.user_data.pop("selected_subsection", None)
            context.user_data.pop("selected_subsection_id", None)
        elif context.user_data.get("selected_section"):
            await show_profile_menu(update, context)
        return

    if text == "üè† –õ–æ–±–±–∏":
        from telegram_bot.main_menu_handlers.main_menu import main_menu_markup
        clear_profile_context(context)
        context.user_data["mode"] = None
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_markup)
        return

    cleaned_text = text.split(" ", 1)[-1]
    if context.user_data.get("current_section_id"):
        context.user_data["selected_subsection"] = cleaned_text
        subsection = await fetch_section_by_name(str(update.effective_user.id), cleaned_text, context.user_data.get("selected_section_id"))
        if subsection:
            context.user_data["selected_subsection_id"] = subsection["id"]
        await show_objects_in_subsection(update, context)
    else:
        await show_subsections(update, context, cleaned_text)

__all__ = [
    "show_profile_menu",
    "show_subsections",
    "show_objects_in_subsection",
    "handle_profile_navigation",
]
