from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_profile import insert_object

# üß© –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def build_cancel_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def build_confirm_keyboard():
    return ReplyKeyboardMarkup([["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)

def build_post_object_keyboard():
    return ReplyKeyboardMarkup([
        ["‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤"],
        ["üè† –õ–æ–±–±–∏", "üîô –ù–∞–∑–∞–¥"]
    ], resize_keyboard=True)

# üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
async def handle_object_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = (update.message.text or "").strip()
    state = context.user_data.get("state")

    # === –û–¢–ú–ï–ù–ê ===
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        for key in ["state", "new_object_name", "new_object_description", "new_object_photo"]:
            context.user_data.pop(key, None)
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=build_post_object_keyboard())
        return "refresh_objects"

    # === –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ ===
    if state == "awaiting_object_name":
        context.user_data["new_object_name"] = text
        context.user_data["state"] = "awaiting_object_description"
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=build_cancel_keyboard())
        return True

    # === –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ ===
    if state == "awaiting_object_description":
        context.user_data["new_object_description"] = text
        context.user_data["state"] = "awaiting_object_photo"
        await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:", reply_markup=build_cancel_keyboard())
        return True

    # === –®–∞–≥ 3: –§–æ—Ç–æ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ===
    if state == "awaiting_object_photo":
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
        elif text.lower() in ["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"]:
            file_id = None
        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", reply_markup=build_cancel_keyboard())
            return True

        context.user_data["new_object_photo"] = file_id
        context.user_data["state"] = "confirm_object"

        name = context.user_data.get("new_object_name")
        desc = context.user_data.get("new_object_description")
        preview = f"üì¶ –û–±—ä–µ–∫—Ç:\n*{name}*\n_{desc}_"

        if file_id:
            await update.message.reply_photo(photo=file_id, caption=preview, parse_mode="Markdown", reply_markup=build_confirm_keyboard())
        else:
            await update.message.reply_text(preview, parse_mode="Markdown", reply_markup=build_confirm_keyboard())

        return True

    # === –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
    if state == "confirm_object":
        if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            section_id = context.user_data.get("current_section_id")
            section_title = context.user_data.get("current_section_title")

            if not isinstance(section_id, int) or not section_title:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
                for key in ["state", "new_object_name", "new_object_description", "new_object_photo"]:
                    context.user_data.pop(key, None)
                return "refresh_objects"

            await insert_object(
                user_id=user_id,
                section_id=section_id,
                section_title=section_title,
                name=context.user_data.get("new_object_name"),
                description=context.user_data.get("new_object_description"),
                photo_file_id=context.user_data.get("new_object_photo")
            )

            for key in ["state", "new_object_name", "new_object_description", "new_object_photo"]:
                context.user_data.pop(key, None)

            await update.message.reply_text("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=build_post_object_keyboard())
            return "refresh_objects"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            for key in ["state", "new_object_name", "new_object_description", "new_object_photo"]:
                context.user_data.pop(key, None)
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=build_post_object_keyboard())
            return "refresh_objects"

    return False
