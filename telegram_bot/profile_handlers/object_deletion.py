from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_profile import fetch_objects_by_section, delete_object_by_id

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
confirm_delete_markup = ReplyKeyboardMarkup(
    [["üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True
)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def show_objects_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    section_id = context.user_data.get("current_section_id")

    if not section_id:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏–ª–∏ —Ä–∞–∑–¥–µ–ª.")
        return

    objects = await fetch_objects_by_section(user_id, section_id)

    if not objects:
        await update.message.reply_text("üì≠ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    context.user_data["deletion_candidates"] = {obj["name"]: obj["id"] for obj in objects}

    keyboard = [[name] for name in context.user_data["deletion_candidates"]]
    keyboard.append(["üîô –ù–∞–∑–∞–¥"])

    await update.message.reply_text("üóë –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
async def handle_object_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    state = context.user_data.get("state")

    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        context.user_data.pop("state", None)
        context.user_data.pop("selected_object_name", None)
        context.user_data.pop("deletion_candidates", None)
        await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return "refresh_objects"

    # –®–∞–≥ 1: –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞
    if state is None and text in context.user_data.get("deletion_candidates", {}):
        context.user_data["selected_object_name"] = text
        context.user_data["state"] = "confirm_object_deletion"
        await update.message.reply_text(
            f"–£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç ¬´{text}¬ª?",
            reply_markup=confirm_delete_markup
        )
        return True

    # –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if state == "confirm_object_deletion":
        if text == "üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ":
            object_name = context.user_data.get("selected_object_name")
            object_id = context.user_data.get("deletion_candidates", {}).get(object_name)

            if object_id:
                await delete_object_by_id(object_id)

            context.user_data.pop("state", None)
            context.user_data.pop("selected_object_name", None)
            context.user_data.pop("deletion_candidates", None)

            await update.message.reply_text(f"‚úÖ –û–±—ä–µ–∫—Ç ¬´{object_name}¬ª —É–¥–∞–ª—ë–Ω.")
            return "refresh_objects"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.pop("state", None)
            context.user_data.pop("selected_object_name", None)
            await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_objects"

        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=confirm_delete_markup)
            return True

    return False
