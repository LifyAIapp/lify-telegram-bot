from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_profile import delete_section_by_id

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_delete_markup = ReplyKeyboardMarkup(
    [["üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True
)

async def handle_section_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool | str:
    text = update.message.text
    state = context.user_data.get("state")

    # –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
    if text == "üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª":
        section_id = context.user_data.get("selected_section_id")
        section_name = context.user_data.get("selected_section")
        if not isinstance(section_id, int):
            await update.message.reply_text("‚ö†Ô∏è –†–∞–∑–¥–µ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return True

        context.user_data["state"] = "confirm_delete_section"
        await update.message.reply_text(
            f"–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª ¬´{section_name}¬ª?",
            reply_markup=confirm_delete_markup
        )
        return True

    # –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
    if text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª":
        subsection_id = context.user_data.get("selected_subsection_id")
        subsection_name = context.user_data.get("selected_subsection")
        if not isinstance(subsection_id, int):
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return True

        context.user_data["state"] = "confirm_delete_subsection"
        await update.message.reply_text(
            f"–£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª ¬´{subsection_name}¬ª?",
            reply_markup=confirm_delete_markup
        )
        return True

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞
    if state == "confirm_delete_section":
        if text == "üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ":
            section_id = context.user_data.get("selected_section_id")

            await delete_section_by_id(section_id)
            context.user_data.clear()
            await update.message.reply_text("‚úÖ –†–∞–∑–¥–µ–ª —É–¥–∞–ª—ë–Ω.")
            return "refresh_menu"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.pop("state", None)
            await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_menu"

        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=confirm_delete_markup)
            return True

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
    if state == "confirm_delete_subsection":
        if text == "üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ":
            subsection_id = context.user_data.get("selected_subsection_id")

            await delete_section_by_id(subsection_id)

            context.user_data.pop("state", None)
            context.user_data.pop("selected_subsection", None)
            context.user_data.pop("selected_subsection_id", None)

            await update.message.reply_text("‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª —É–¥–∞–ª—ë–Ω.")
            return "refresh_menu"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.pop("state", None)
            await update.message.reply_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_menu"

        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=confirm_delete_markup)
            return True

    return False
