from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database.db_profile import insert_section_if_not_exists

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_markup = ReplyKeyboardMarkup(
    [["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True
)

cancel_markup = ReplyKeyboardMarkup(
    [["‚ùå –û—Ç–º–µ–Ω–∞"]],
    resize_keyboard=True
)

async def handle_section_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool | str:
    text = update.message.text
    state = context.user_data.get("state")

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        context.user_data.pop("state", None)
        context.user_data.pop("new_section_name", None)
        context.user_data.pop("new_section_emoji", None)
        await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return "refresh_menu"

    # –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ
    if state == "awaiting_section_name":
        context.user_data["new_section_name"] = text
        context.user_data["state"] = "awaiting_emoji"
        await update.message.reply_text("üì¶ –£–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üìö –∏–ª–∏ üé®):", reply_markup=cancel_markup)
        return True

    # –®–∞–≥ 2: –≠–º–æ–¥–∑–∏
    elif state == "awaiting_emoji":
        context.user_data["new_section_emoji"] = text
        context.user_data["state"] = "confirm_section_name"
        name = context.user_data.get("new_section_name")
        await update.message.reply_text(
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª ¬´{text} {name}¬ª?",
            reply_markup=confirm_markup
        )
        return True

    # –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif state == "confirm_section_name":
        if text == "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            user_id = str(update.effective_user.id)
            name = context.user_data.get("new_section_name")
            emoji = context.user_data.get("new_section_emoji")
            parent_section_id = context.user_data.get("current_section_id")

            await insert_section_if_not_exists(
                user_id=user_id,
                section_title=name,
                emoji=emoji,
                parent_section_id=parent_section_id
            )

            context.user_data.clear()
            await update.message.reply_text(f"‚úÖ –†–∞–∑–¥–µ–ª ¬´{emoji} {name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")
            return "refresh_menu"

        elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data.pop("state", None)
            context.user_data.pop("new_section_name", None)
            context.user_data.pop("new_section_emoji", None)
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return "refresh_menu"

        else:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=confirm_markup)
            return True

    return False
