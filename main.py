import logging
import os
import asyncio
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes

from telegram_bot.main_menu_handlers.main_menu import welcome, start, handle_menu_choice
from telegram_bot.profile_handlers.profile_handlers import handle_profile_navigation
from telegram_bot.friends_handlers.friends_handlers import handle_friends_navigation
from telegram_bot.events_handlers.events_handlers import handle_events_navigation
from telegram_bot.health_handlers.health_handlers import handle_health_navigation
from telegram_bot.config import TELEGRAM_TOKEN

# ‚úÖ –ò–º–ø–æ—Ä—Ç navigation-—Ö–µ–Ω–¥–ª–µ—Ä–∞ –∑–∞–¥–∞—á
from telegram_bot.tasks_handlers.tasks_handlers import handle_tasks_navigation

# [CYCLE_NOTIFICATIONS] –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram_bot.cycle_handlers.cycle_notifications import send_cycle_reminders

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8000))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def setup_application():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –°—Ç–∞—Ä—Ç
    application.add_handler(MessageHandler(filters.Regex("^üìç –ù–∞–∂–º–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å$"), start))
    application.add_handler(CommandHandler("start", welcome))

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    application.add_handler(MessageHandler(
        filters.Regex("^(ü£çÔ∏è –ü—Ä–æ—Ñ–∏–ª—å|üë´ –î—Ä—É–∑—å—è|üß† –ü—Å–∏—Ö–æ–ª–æ–≥|ü¶•Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ|üìù –ó–∞–¥–∞—á–∏|üîÅ –¶–∏–∫–ª|üí¨ –ü–æ–º–æ—â—å|üìÖ –°–æ–±—ã—Ç–∏—è)$"),
        handle_menu_choice
    ))

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    async def handle_mode_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        mode = context.user_data.get("mode")
        logger.info(f"[ROUTER] mode = {mode}")
        logger.info(f"[ROUTER] user_data keys = {list(context.user_data.keys())}")

        if not mode:
            logger.warning("[ROUTER] Mode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
            return

        if mode == "profile":
            logger.info("[ROUTER] –í—ã–∑–æ–≤ handle_profile_navigation")
            await handle_profile_navigation(update, context)
        elif mode == "friends":
            logger.info("[ROUTER] –í—ã–∑–æ–≤ handle_friends_navigation")
            await handle_friends_navigation(update, context)
        elif mode == "events":
            logger.info("[ROUTER] –í—ã–∑–æ–≤ handle_events_navigation")
            await handle_events_navigation(update, context)
        elif mode == "health":
            logger.info("[ROUTER] –í—ã–∑–æ–≤ handle_health_navigation")
            await handle_health_navigation(update, context)
        elif mode == "tasks":
            logger.info("[ROUTER] –í—ã–∑–æ–≤ handle_tasks_navigation")
            await handle_tasks_navigation(update, context)
        else:
            logger.error(f"[ROUTER] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
            await update.message.reply_text("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")

    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_mode_navigation))

    return application


async def start_bot():
    app = setup_application()

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å Webhook...")

    await app.initialize()
    await app.bot.set_webhook(url=WEBHOOK_URL)
    await app.start()
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="/",
        webhook_url=WEBHOOK_URL,
    )

    # [CYCLE_NOTIFICATIONS] –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–∏–∫–ª–µ
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_cycle_reminders, trigger="cron", hour=7)
    scheduler.start()

    await asyncio.Event().wait()


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(start_bot())
        loop.run_forever()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
