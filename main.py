import logging
import os
import asyncio
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes

from telegram_bot.main_menu_handlers.main_menu import welcome, start, handle_menu_choice
from telegram_bot.profile_handlers.profile_handlers import handle_profile_navigation
from telegram_bot.friends_handlers.friends_handlers import handle_friends_navigation
from config import TELEGRAM_TOKEN

WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def setup_application():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –°—Ç–∞—Ä—Ç
    application.add_handler(MessageHandler(filters.Regex("^üìç –ù–∞–∂–º–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å$"), start))
    application.add_handler(CommandHandler("start", welcome))

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    application.add_handler(MessageHandler(
        filters.Regex("^(ü£çÔ∏è –ü—Ä–æ—Ñ–∏–ª—å|üë´ –î—Ä—É–∑—å—è|üß† –ü—Å–∏—Ö–æ–ª–æ–≥|ü¶•Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ|üìù –ó–∞–¥–∞—á–∏|üîÅ –¶–∏–∫–ª|üí¨ –ü–æ–º–æ—â—å \\(FTUE\\))$"),
        handle_menu_choice
    ))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    async def handle_mode_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        mode = context.user_data.get("mode")
        logger.info(f"[ROUTER] mode = {mode}")
        logger.info(f"[ROUTER] user_data = {context.user_data}")

        if not mode:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
            return

        if mode == "profile":
            await handle_profile_navigation(update, context)
        elif mode == "friends":
            await handle_friends_navigation(update, context)
        else:
            await update.message.reply_text("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")

    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_mode_navigation))

    return application


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å Webhook...", flush=True)
    app = setup_application()

    async def set_webhook_and_run():
        await app.bot.set_webhook(url=WEBHOOK_URL)
        await app.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", 8000)),
            webhook_url=WEBHOOK_URL,
            close_loop=False  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ event loop (Render –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –µ–≥–æ —Å–∞–º)
    try:
        asyncio.get_running_loop()
    except RuntimeError:
        # –¶–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º
        asyncio.run(set_webhook_and_run())
    else:
        # –¶–∏–∫–ª —É–∂–µ –µ—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞—ë–º —Ç–∞—Å–∫ –∏ –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
        asyncio.create_task(set_webhook_and_run())
        import time
        while True:
            time.sleep(3600)
