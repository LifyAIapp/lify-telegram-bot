import logging
import os
import asyncio
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ContextTypes

from telegram_bot.main_menu_handlers.main_menu import welcome, start, handle_menu_choice
from telegram_bot.profile_handlers.profile_handlers import handle_profile_navigation
from telegram_bot.friends_handlers.friends_handlers import handle_friends_navigation
from config import TELEGRAM_TOKEN

WEBHOOK_URL = os.getenv("WEBHOOK_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_application():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –°—Ç–∞—Ä—Ç
    application.add_handler(MessageHandler(filters.Regex("^üìç –ù–∞–∂–º–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å$"), start))
    application.add_handler(CommandHandler("start", welcome))

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    application.add_handler(MessageHandler(
        filters.Regex("^(ü£çÔ∏è –ü—Ä–æ—Ñ–∏–ª—å|üë´ –î—Ä—É–∑—å—è|üß† –ü—Å–∏—Ö–æ–ª–æ–≥|ü¶•Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ|üìù –ó–∞–¥–∞—á–∏|üîÅ –¶–∏–∫–ª|üí¨ –ü–æ–º–æ—â—å \\(FTUE\\))$"),
        handle_menu_choice
    ))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    async def handle_mode_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
        mode = context.user_data.get("mode")
        logger.info(f"[ROUTER] mode = {mode}")
        logger.info(f"[ROUTER] user_data = {context.user_data}")

        if not mode:
            await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
            return

        if mode == "profile":
            await handle_profile_navigation(update, context)
        elif mode == "friends":
            await handle_friends_navigation(update, context)
        else:
            await update.message.reply_text("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")

    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO, handle_mode_navigation))

    return application

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å Webhook...")

    app = setup_application()

    await app.initialize()
    await app.bot.set_webhook(url=WEBHOOK_URL)
    await app.start()

    # –ó–∞–ø—É—Å–∫ webhook –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ app.updater
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8000)),
        url_path="/",
        webhook_url=WEBHOOK_URL,
    )

    # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
    await asyncio.Event().wait()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print(f"üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
